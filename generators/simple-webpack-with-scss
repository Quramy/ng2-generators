#!/bin/sh

# __DESCRIPTION__: Simple starter with Sass, Webpack.

CMD_NAME=`basename $0`
APP_NAME=$1

if [ -z "${APP_NAME}" ]; then
  echo "usage: ${CMD_NAME} application_name" >&2
  exit 1
fi

if [ -d "${APP_NAME}" ]; then
  echo "${APP_NAME} already exists." >&2
  exit 1
fi

echo "Start to create new application '${APP_NAME}'." >&2

mkdir -p ${APP_NAME}

# install global
for pkg in "browser-sync webpack dtsm rimraf"; do
  which ${pkg} > /dev/null || npm -g i ${pkg}
done

pushd ${APP_NAME} > /dev/null

### dotfiles {{{
cat << EOF > .editorconfig
root = true

[*]
charset = utf-8
end_of_line = lf
trim_trailing_whitespace = true

[*.ts]
indent_style = space
indent_size = 2
EOF

cat << EOF > .gitignore
### Node ###
# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history


### Typings ###
## Ignore downloaded typings
typings

.built/
bundle/
EOF

### }}}

### Node.js {{{
cat << EOF > package.json
{
  "name": "${APP_NAME}",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "postinstall": "dtsm install",
    "clean": "rimraf bundle",
    "watch": "node ./node_modules/webpack/bin/webpack.js -w",
    "prestart": "node ./node_modules/webpack/bin/webpack.js",
    "start": "browser-sync start --server --files bundle/*.js"
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "angular2": "2.0.0-beta.13",
    "es6-shim": "0.35.0",
    "reflect-metadata": "0.1.2",
    "rxjs": "5.0.0-beta.2",
    "zone.js": "0.6.6"
  },
  "devDependencies": {
    "css-loader": "^0.23.1",
    "node-sass": "^3.4.2",
    "raw-loader": "^0.5.1",
    "sass-loader": "^3.2.0",
    "style-loader": "^0.13.1",
    "ts-loader": "^0.8.1",
    "typescript": "^1.8.9",
    "webpack": "^1.12.14"
  }
}
EOF
### }}}

### build script {{{
cat << 'EOF' > webpack.config.js
var path = require("path");
module.exports = {
  resolve: {
    extensions: ['', '.ts', '.js']
  },
  module: {
    loaders: [
      { test: /\.ts$/, loader: 'ts-loader', exclude: [ /node_modules/ ] },
      { test: /\.scss$/, loaders: ['raw', 'sass'], exclude: [ /base\.scss$/ ] },
      { test: /base.scss$/, loaders: ['style', 'css', 'sass'] },
    ],
    noParse: [
      path.join(__dirname, 'node_modules/zone.js/dist'),
      path.join(__dirname, 'node_modules/reflect-metadata/Reflect.js'),
    ]
  },
  entry: {
    clinet: "./src/index"
  },
  output: {
    path: path.resolve(__dirname, 'bundle'),
    filename: 'client.js'
  }
};
EOF
### }}}

### TypeScript {{{
cat << 'EOF' > tsconfig.json
{
    "compilerOptions": {
        "module": "commonjs",
        "target": "es5",
        "noImplicitAny": false,
        "sourceMap": true,
        "outDir": ".built",
        "rootDir": "src",
        "moduleResolution": "node",
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true
    },
    "exclude": [
        "node_modules"
    ]
}
EOF
### }}}

### App Sources {{{

mkdir -p src/app

cat << 'EOF' > index.html
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Angular2 First App</title>
</head>
<body>
<my-app>Loading...</my-app>
<script async src="bundle/client.js"></script>
</body>
</html>
EOF


cat << 'EOF' > src/app/my-app.component.ts
import {Component} from 'angular2/core';

@Component({
  selector: 'my-app',
  styles: [
    require('./my-app.component.scss')
  ],
  template: `
  <div>
    <h1>Hello: {{name}}</h1>
    <input type="text" [(ngModel)]="name" />
  </div>
  `,
})
export class MyApp {
  private name = 'My Angular2 first app';
  constructor() {}
}
EOF

cat << 'EOF' > src/index.ts
require('./base.scss');
import 'es6-shim';
import 'reflect-metadata';
import 'zone.js/dist/zone';
import 'rxjs';

import {bootstrap} from 'angular2/platform/browser';
import {MyApp} from './app/my-app.component';

bootstrap(MyApp).then(() => {
  console.log('bootstrap done!');
});
EOF

cat << 'EOF' > src/app/my-app.component.scss
@import '../mixins';

h1 {
  @include colored(green);
}
EOF

cat << 'EOF' > src/_mixins.scss
@mixin colored($color) {
  color: $color;
}
EOF

cat << 'EOF' > src/base.scss
@import './mixins';

* {
  margin: 0;
  padding: 0;
  color: #404047;
}
EOF

### }}}

echo "Prepare typings files with dtsm. It might take a while." >&2
dtsm init
dtsm install node es6-shim --save || exit 1

echo "Install dependencies. It takes few minutes." >&2
npm i || exit 1

echo "" >&2
echo "Complete genaration, exec cd ${APP_NAME} and npm start ." >&2

popd 

#:vim ft=sh
