#!/bin/sh

# __DESCRIPTION__: Universal starter. It has both SSR(server-side-rendering) and SPA(single-page-application).

CMD_NAME=`basename $0`
APP_NAME=$1

if [ -z "${APP_NAME}" ]; then
  echo "usage: ${CMD_NAME} application_name" >&2
  exit 1
fi

if [ -d "${APP_NAME}" ]; then
  echo "${APP_NAME} already exists." >&2
  exit 1
fi

echo "Start to create new application '${APP_NAME}'." >&2

mkdir -p ${APP_NAME}

# install global
for pkg in "nodemon webpack dtsm rimraf"; do
  which ${pkg} > /dev/null || npm -g i ${pkg}
done

pushd ${APP_NAME} > /dev/null

### dotfiles {{{
cat << EOF > .editorconfig
root = true

[*]
charset = utf-8
end_of_line = lf
trim_trailing_whitespace = true

[*.ts]
indent_style = space
indent_size = 2
EOF

cat << EOF > .gitignore
### Node ###
# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history


### Typings ###
## Ignore downloaded typings
typings

.built/
bundle/
EOF

### }}}

### Node.js {{{
cat << EOF > package.json
{
  "name": "${APP_NAME}",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "postinstall": "dtsm install",
    "clean": "rimraf bundle",
    "watch": "node ./node_modules/webpack/bin/webpack.js -w",
    "prestart": "node ./node_modules/webpack/bin/webpack.js",
    "start": "nodemon bundle/server.js"
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "angular2": "2.0.0-beta.13",
    "angular2-universal-preview": "0.84.2",
    "es6-shim": "0.35.0",
    "express": "^4.13.4",
    "express-engine": "^1.0.1",
    "preboot": "^2.0.5",
    "reflect-metadata": "0.1.2",
    "rxjs": "5.0.0-beta.2",
    "zone.js": "0.6.6"
  },
  "devDependencies": {
    "ts-loader": "^0.8.1",
    "typescript": "^1.8.9",
    "webpack": "^1.12.14"
  }
}
EOF
### }}}

### build script {{{
cat << 'EOF' > webpack.config.js
var path = require("path");

var baseConfig = {
  resolve: {
    extensions: ['', '.ts', '.js']
  },
  module: {
    loaders: [
      {test: /.ts$/, loader: 'ts-loader', exclude: [ /node_modules/ ]},
    ],
    noParse: [
      path.join(__dirname, 'node_modules/zone.js/dist'),
      path.join(__dirname, 'node_modules/reflect-metadata/Reflect.js'),
    ]
  },
};

var clientConfig = Object.assign({}, baseConfig, {
  target: 'web',
  entry: {
    clinet: "./src/client"
  },
  output: {
    path: path.resolve(__dirname, 'bundle'),
    filename: 'client.js'
  }
});

var serverConfig = Object.assign({}, baseConfig, {
  target: 'node',
  entry: {
    clinet: "./src/server"
  },
  output: {
    path: path.resolve(__dirname, 'bundle'),
    filename: 'server.js'
  },
  externals: checkNodeImport,
  node: {
    global: true,
    __dirname: true,
    __filename: true,
    process: true,
    Buffer: true
  }
});

function checkNodeImport(context, request, cb) {
  if (!path.isAbsolute(request) && (request.charAt(0) !== '.' && request.charAt(0) !== '!' )) {
    cb(null, 'commonjs ' + request); return;
  }
  cb();
}

module.exports = [
  clientConfig,
  serverConfig
];
EOF
### }}}

### TypeScript {{{
cat << 'EOF' > tsconfig.json
{
    "compilerOptions": {
        "module": "commonjs",
        "target": "es5",
        "noImplicitAny": false,
        "sourceMap": true,
        "outDir": ".built",
        "rootDir": "src",
        "moduleResolution": "node",
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true
    },
    "exclude": [
        "node_modules"
    ]
}
EOF
### }}}

### App Sources {{{

mkdir -p src/app
mkdir -p views

cat << 'EOF' > views/index.html
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Angular2 First App</title>
  <base href="/">
</head>
<body>
<my-app>Loading...</my-app>
<script async src="/client.js"></script>
</body>
</html>
EOF

cat << 'EOF' > src/server.ts
import * as express from 'express';
import 'angular2-universal-preview/polyfills';
import {expressEngine, REQUEST_URL, NODE_LOCATION_PROVIDERS, NODE_PRELOAD_CACHE_HTTP_PROVIDERS} from 'angular2-universal-preview';
import {provide, enableProdMode} from 'angular2/core';
import {APP_BASE_HREF, ROUTER_PROVIDERS} from 'angular2/router';
import * as path from 'path';

import {MyApp} from './app/my-app.component';

const app = express();
const port = 3000;
app.use(express.static(path.join(__dirname, '..', 'bundle')));

// Express View
app.engine('.html', expressEngine);
app.set('views', path.join(__dirname, '..', 'views'));
app.set('view engine', 'html');

const ngApp = (req, res) => {
    const url = req.originalUrl || '/';
    res.render('index', {
        directives: [MyApp],
        providers: [
            ...ROUTER_PROVIDERS, provide(APP_BASE_HREF, {useValue: '/'}),
            provide(REQUEST_URL, {useValue: url}),
            ...NODE_LOCATION_PROVIDERS,
            ...NODE_PRELOAD_CACHE_HTTP_PROVIDERS,
        ],
        async: true,
        preboot: {
          debug: true,
        },
    });
};

// API Router
const apiRouter = express.Router();
apiRouter.get('/message', (req, res) => {
  res.send('This message is retrieved from server.');
});

app.use('/api/v1', apiRouter);

// Rendering router
const appRouter = express.Router();
appRouter.get('/*', ngApp);
app.use('/', appRouter);

app.listen(port, () => {
  console.log('listen:', port);
});
EOF

cat << 'EOF' > src/app/my-app.component.ts
import {Component, OnInit} from 'angular2/core';
import {Http} from 'angular2/http';
import {ROUTER_DIRECTIVES, RouteConfig} from 'angular2/router';

@Component({
  selector: 'home',
  template: `
  <section>
    <h2>Home:</h2>
    <span>{{message}}</span>
  </section>
  `,
})
class Home implements OnInit {
  private message: string;
  constructor(private http: Http) {}
  ngOnInit() {
    this.http.get('http://localhost:3000/api/v1/message').subscribe(res => {
      this.message = res.text();
    });
  }
}


@Component({
  selector: 'about',
  template: `
  <section>
    <h2>About:</h2>
  </section>
  `,
})
class About {
}

@Component({
  selector: 'my-app',
  directives: [...ROUTER_DIRECTIVES],
  styles: [
    `h1 {
      color: green;
    }
    a:link, a:active, a:hover, a:visited, a:focus {
      color: inherit;
    }
    a.router-link-active {
      color: green;
      background-color: #e0e0e0;
    }
    `,
  ],
  template: `
  <div>
    <nav>
    <a [routerLink]="['Home']">home</a>
    <a [routerLink]="['About']">about</a>
    </nav>
    <h1>Hello: {{name}}</h1>
    <input type="text" [(ngModel)]="name" />
    <router-outlet></router-outlet>
  </div>
  `,
})
@RouteConfig([
  {
    name: 'Home',
    path: '/home',
    component: Home,
    useAsDefault: true,
  },
  {
    name: 'About',
    path: '/about',
    component: About,
  },
  {
    path: '/**',
    redirectTo: ['Home'],
  }
])
export class MyApp {
  private name = 'My Angular2 first app';
  constructor() {}
}
EOF

cat << 'EOF' > src/client.ts
import 'es6-shim';
import 'reflect-metadata';
import 'zone.js/dist/zone';
import 'rxjs';

import {bootstrap} from 'angular2/platform/browser';
import {HTTP_PROVIDERS} from 'angular2/http'
import {ROUTER_PROVIDERS} from 'angular2/router';
import {MyApp} from './app/my-app.component';
import {prebootComplete} from 'angular2-universal-preview';

bootstrap(MyApp, [...HTTP_PROVIDERS, ...ROUTER_PROVIDERS]).then(() => {
  console.log('bootstrap done!');
  prebootComplete();
});
EOF

### }}}

echo "Prepare typings files with dtsm. It might take a while." >&2
dtsm init
dtsm install node express es6-shim --save || exit 1

echo "Install dependencies. It takes few minutes." >&2
npm i || exit 1

echo "" >&2
echo "Complete genaration, exec cd ${APP_NAME} and npm start ." >&2

popd 

#:vim ft=sh
